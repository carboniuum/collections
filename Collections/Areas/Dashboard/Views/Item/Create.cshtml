@model ItemCreateViewModel

<h1 class="font-bold pl-2">Add Item</h1>

<div class="w-full mt-4">
	<form 
		asp-action="Create"
		class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4"
		method="post"
		enctype="multipart/form-data"
	>
		<input asp-for="CollectionId" type="hidden" value="@(Context.Request.Query["collection"][0])" />
		<div class="mb-4">
			<label class="block text-gray-700 text-sm font-bold mb-2" asp-for="Name"></label>
			<input
				asp-for="Name"
				class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
				type="text" 
				required
			/>
		</div>
		
		<div class="mb-4">
			<label class="block text-gray-700 text-sm font-bold mb-2" asp-for="Tags"></label>
			<input
				asp-for="Tags"
				class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
				type="text" 
				placeholder="Write some tags through commas..."
				required
			/>
		</div>

		<div class="mb-4">
			<label class="block text-gray-700 text-sm font-bold mb-2" asp-for="Image"></label>
			<input
				asp-for="Image"
				class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
				type="file" 
			/>
		</div>
		
		<div class="mb-4 flex items-end">
			<div class="w-1/2">
				<label class="block text-gray-700 text-sm font-bold mb-2" for="fieldGroupSelect">
					Choose the type of the field
				</label>
				<select
					id="fieldGroupSelect"
					class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
				>
				</select>
			</div>

			<div class="w-1/2 ml-2">
				<button id="addFieldBtn" type="button">
					<img src="~/images/plus.png" alt="plus" class="w-8" />
				</button>
			</div>
		</div>

		<div id="fieldGroupsWrapper">

		</div>

		<div class="flex items-center justify-between">
			<button
				class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" 
				type="submit"
			>
				Save
			</button>
		</div>
	</form>
</div>

@section Scripts {
	<script>
		const fieldGroupSelect = document.getElementById('fieldGroupSelect')
		const addFieldBtn = document.getElementById('addFieldBtn')
		const removeFieldBtns = document.querySelectorAll('.removeFieldBtns')
		const fieldGroupsWrapper = document.getElementById('fieldGroupsWrapper')
		const types = { 'Number': 1, 'Text': 2, 'Textarea': 3, 'Checkbox': 4 }

		const getFieldGroups = async () => {
			try {
				const res = await fetch('/api/fieldgroups')
				const fieldGroups = await res.json()
				let index = 0;
				for (let fg of fieldGroups)
				{
					let opt = document.createElement('option');
					opt.value = fg.name
					opt.innerHTML = fg.name

					fieldGroupSelect.appendChild(opt)
					index++
				}
			} catch (e) {
				console.log(e.message)
			}
		}

		const getKeyValueGroup = inputType => {
			let group

			const wrapper = document.createElement('div')
			wrapper.classList.add('mb-4')
			
			const inputWrapper = document.createElement('div')
			inputWrapper.classList.add('flex')

			const label = document.createElement('label') 
			label.className = 'block text-gray-700 text-sm font-bold mb-2'
			label.innerText = 'Key-Value Pair'
			
			const keyInput = document.createElement('input')
			keyInput.name = 'keys'
			keyInput.type = 'text'
			keyInput.className = 'mr-2 shadow appearance-none border rounded w-1/2 py-2 px-2 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
			keyInput.required = true
			
			const typeInput = document.createElement('input')
			typeInput.name = 'types'
			typeInput.type = 'hidden'

			const removeFieldBtn = document.createElement('button')
			removeFieldBtn.type = 'button'
			removeFieldBtn.classList.add('removeFieldBtns')
			removeFieldBtn.innerHTML = '<img src="/images/minus.png" class="w-10" />'

			wrapper.appendChild(label)

			switch(inputType) {
				case 'Textarea':
					typeInput.value = types[inputType]
					
					const textarea = document.createElement('textarea')
					textarea.className = 'shadow appearance-none border rounded w-1/2 py-2 px-2 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
					textarea.name = 'values'
					textarea.type = 'text'
					textarea.required = true
					
					inputWrapper.appendChild(typeInput)
					inputWrapper.appendChild(keyInput)
					inputWrapper.appendChild(textarea)
					inputWrapper.appendChild(removeFieldBtn)
					wrapper.appendChild(inputWrapper)
					
					group = wrapper

					removeFieldBtn.addEventListener('click', () => {
						fieldGroupsWrapper.removeChild(wrapper)
					})
				break

				case 'Checkbox':
					typeInput.value = types[inputType]

					const checkbox = document.createElement('input')
					checkbox.name = 'values'
					checkbox.type = 'checkbox'
					checkbox.required = true
				
					inputWrapper.appendChild(typeInput)
					inputWrapper.appendChild(keyInput)
					inputWrapper.appendChild(checkbox)
					inputWrapper.appendChild(removeFieldBtn)
					wrapper.appendChild(inputWrapper)
					
					group = wrapper

					removeFieldBtn.addEventListener('click', () => {
						fieldGroupsWrapper.removeChild(wrapper)
					})
				break
				
				default:
					typeInput.value = types[inputType]

					const input = document.createElement('input')
					input.name = 'values'
					input.type = inputType
					input.className = 'shadow appearance-none border rounded w-1/2 py-2 px-2 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
					input.required = true

					inputWrapper.appendChild(typeInput)
					inputWrapper.appendChild(keyInput)
					inputWrapper.appendChild(input)
					inputWrapper.appendChild(removeFieldBtn)
					wrapper.appendChild(inputWrapper)
					
					group = wrapper

					removeFieldBtn.addEventListener('click', () => {
						fieldGroupsWrapper.removeChild(wrapper)
					})
				break
			}

			return group
		}

		getFieldGroups()

		addFieldBtn.addEventListener('click', () => {
			fieldGroupsWrapper.appendChild(getKeyValueGroup(fieldGroupSelect.value))
		})
	</script>
}