@model ItemEditViewModel
@{
	var types = new Dictionary<FieldType, string>
	{
		[FieldType.Number] = "number", 
		[FieldType.Text] = "text", 
		[FieldType.Boolean] = "checkbox", 
		[FieldType.Date] = "date"
	}; 
	ViewData["Title"] = "Item Edit";
}

<h1 class="font-bold pl-2">Edit Item</h1>

<div class="w-full mt-4">
	<form 
		asp-action="Edit"
		class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4"
		method="post"
		enctype="multipart/form-data"
	>
		<input asp-for="Id" type="hidden" />
		<input asp-for="Fields" type="hidden" />
		<div class="mb-4">
			<label class="block text-gray-700 text-sm font-bold mb-2" asp-for="Name"></label>
			<input
				asp-for="Name"
				class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
				type="text" 
				required
			/>
		</div>
		
		<div class="mb-4">
			<label class="block text-gray-700 text-sm font-bold mb-2" asp-for="Tags"></label>
			<input
				asp-for="Tags"
				class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
				type="text" 
				placeholder="Write some tags through commas..."
				required
			/>
		</div>

		<div class="mb-4">
			<img
				src="@Model.ExistingImage"
				class="w-64"
			/>
		</div>

		<div class="mb-4">
			<label class="block text-gray-700 text-sm font-bold mb-2" asp-for="Image"></label>
			<input
				asp-for="Image"
				class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
				type="file" 
			/>
		</div>

		@if (Model.Fields.Count > 0)
		{
			<div id="fieldGroupsWrapper">
				@foreach (var field in Model.Fields)
				{
					<div class="mb-4">
						@switch (field.Type)
						{
							case FieldType.Textarea:
								<label class="block text-gray-700 text-sm font-bold mb-2" for="@field.Id">@field.Key</label>
								<input name="keys" value="@field.Key" type="hidden" />
								<input name="types" value="@((int)field.Type)" type="hidden" />
								<textarea
									name="values"
								>@field.Value</textarea>
							break;
							case FieldType.Boolean:
								<label class="block text-gray-700 text-sm font-bold mb-2" for="@field.Id">@field.Key</label>
								<input name="keys" value="@field.Key" type="hidden" />
								<input name="types" value="@((int)field.Type)" type="hidden" />
								<input name="values" value="@field.Value" type="checkbox" required />
							break;
							default:
								<label class="block text-gray-700 text-sm font-bold mb-2" for="@field.Id">@field.Key</label>
								<input name="keys" value="@field.Key" type="hidden" />
								<input name="types" value="@((int)field.Type)" type="hidden" />
								<input
									name="values"
									class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
									type="@types[field.Type]" 
									value="@field.Value"
								/>
							break;
						}
					</div>	
				}
			</div>
		}

		<div class="flex items-center justify-between">
			<button
				class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" 
				type="submit"
			>
				Save
			</button>
		</div>
	</form>
</div>

@section Scripts {
	<script>
		const textareas = document.querySelectorAll('textarea')
		if (textareas) {
			ClassicEditor
				.create(textareas[textareas.length - 1], {
					removePlugins: ['CKFinderUploadAdapter', 'CKFinder', 'EasyImage', 'Image', 'ImageCaption', 'ImageStyle', 'ImageToolbar', 'ImageUpload', 'MediaEmbed'],
				})
				.catch(error => {
					console.error(error)
				})
		}
	</script>
}